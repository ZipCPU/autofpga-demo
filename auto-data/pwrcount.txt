################################################################################
##
## Filename: 	pwrcount.txt
## {{{
## Project:	AutoFPGA basic peripheral demonstration project
##
## Purpose:	Counts the number of clock ticks since FPGA initialization.
##		Once the high bit is set, however, it is kept high--allowing
##	you to know that the counter has rolled over.  As a result, this only
##	counts the 2^30 clocks after initialization.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2017-2021, Gisselquist Technology, LLC
## {{{
## This file is part of the AutoFPGA peripheral demonstration project.
##
## The AutoFPGA peripheral demonstration project is free software (firmware):
## you can redistribute it and/or modify it under the terms of the GNU Lesser
## General Public License as published by the Free Software Foundation, either
## version 3 of the License, or (at your option) any later version.
##
## The AutoFPGA peripheral demonstration project is distributed in the hope
## that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
## warranty of MERCHANTIBILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with this program.  (It's in the $(ROOT)/doc directory.  Run make with
## no target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	LGPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/lgpl.html
##
################################################################################
##
## }}}
@PREFIX=pwrcount
@NADDR=1
@SLAVE.TYPE=SINGLE
@SLAVE.BUS=wb
@MAIN.DEFNS=
	reg	[31:0]	r_@$(PREFIX)_data;
@MAIN.INSERT=
	//
	// The power-up counter--counting all of the clocks since startup.
	// Once the clock sets the high order bit, it remains set--so that
	// you can keep using the counter to tell time differences if you wish.
	//
	initial	r_@$(PREFIX)_data = 32'h0;
	always @(posedge i_clk)
	if (r_@$(PREFIX)_data[31])
		r_@$(PREFIX)_data[30:0] <= r_@$(PREFIX)_data[30:0] + 1'b1;
	else
		r_@$(PREFIX)_data[31:0] <= r_@$(PREFIX)_data[31:0] + 1'b1;
	assign	@$(SLAVE.PREFIX)_idata = r_@$(PREFIX)_data;
@REGS.N=1
@REGS.0= 0 R_PWRCOUNT PWRCOUNT
